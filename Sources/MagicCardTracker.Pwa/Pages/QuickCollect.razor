@page "/collection/quick-collect"

@using Commands
@using Constants
@using Exceptions
@using MagicCardTracker.Contracts
@using System.Threading
@using MagicCardTracker.Pwa.Components
@using MagicCardTracker.Pwa.Notifications
@using MediatR
@using Queries
@inject IMediator _mediator
@inject INotificationService _notificationService
@implements IDisposable

<div class="row">
    <div class="col-12 lead">
        <a href="collection">&lt; Collection</a> | Quick Collect
    </div>
</div>

<EditForm Model="_cardId" OnValidSubmit="@AddCardToCollectionAsync">
    <div class="row mt-2 mb-4">
        <div class="col-md-3 content bg-elevated">
            <input class="form-control w-100" @bind="_cardId.SetCode" maxlength="4" placeholder="Set Code" />
        </div>
        <div class="col-md-3 content bg-elevated">
            <input class="form-control w-100" @bind="_cardId.CardNumber" maxlength="4" placeholder="Card number" />
        </div>
        <div class="col-md-6 content bg-elevated d-flex align-items-center">
            <InputRadioGroup @bind-Value="_cardId.LanguageCode">
                <div class="form-check">
                    <InputRadio class="form-check-input" Value="LanguageCodes.English" />
                    <img class="form-check-label img-fluid align-text-bottom" style="width: 32px;" src="EN.png"/>
                </div>
                <div class="form-check ms-2">
                    <InputRadio class="form-check-input" Value="LanguageCodes.German" />
                    <img class="form-check-label img-fluid align-text-bottom" style="width: 32px;" src="DE.png"/>
                </div>
            </InputRadioGroup>
            <div class="form-check ms-4">
                <InputCheckbox class="form-check-input" id="foil" @bind-Value="_collectAsFoil"/>
                <label class="form-check-label" for="foil">
                    Foil
                </label>
            </div>
            <button type="submit" class="btn btn-primary ms-auto"> Add </button>
        </div>
    </div>
</EditForm>

<CardDisplay ShowCountBadge="true" Cards="@_quickCollectionStack.Reverse()">
    <div class="color-white-60 text-center flex-grow-1 d-flex justify-content-center align-items-center lead">
        Just type some set codes and a card numbers to add them to your collection
    </div>
</CardDisplay>

@code {

    private CardIdentity _cardId = new CardIdentity { LanguageCode = LanguageCodes.German };
    private bool _collectAsFoil;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    private HashSet<CollectedCard> _quickCollectionStack = new HashSet<CollectedCard>();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var collection = await _mediator.Send(new GetCollectedCards(), _cts.Token);
        var recentCard = collection.LastOrDefault();

        if (recentCard != null)
        {
            _cardId.SetCode = recentCard.SetCode;
            _cardId.LanguageCode = recentCard.LanguageCode;
        }
    }

    private async Task AddCardToCollectionAsync()
    {
        if (string.IsNullOrWhiteSpace(_cardId.SetCode)
            || string.IsNullOrWhiteSpace(_cardId.CardNumber)
            || string.IsNullOrWhiteSpace(_cardId.LanguageCode))
        {
            return;
        }

        try
        {
            var card = await _mediator.Send(
            new AddCardByNumber(
                _cardId.SetCode,
                _cardId.CardNumber,
                _cardId.LanguageCode,
                _collectAsFoil),
            _cts.Token);
            
            _quickCollectionStack.Add(card);
            _cardId.CardNumber = null;
        }
        catch (CardNotFoundException)
        {
            _notificationService.SendNotification(new Notification($"The card #{_cardId.CardNumber} ({_cardId.SetCode}) could not be found", NotificationType.Error));
        }
    }

    private class CardIdentity
    {
        public string? SetCode { get; set; }

        public string? CardNumber { get; set; }

        public string? LanguageCode { get; set; }
    }
}
