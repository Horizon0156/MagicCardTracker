@page "/search/{Query}"
@using Contracts
@using MagicCardTracker.Pwa.Components
@using System.Threading
@using MediatR
@using Models
@using Queries
@inject IMediator _mediator
@implements IDisposable

<div class="block">
    <label class="text-2xl font-bold">
        Search for '@Query'
    </label>
    <label class="block text-sm text-neutral-400">@(_searchResult?.NumberOfMatchedCards.ToString() ?? "-") cards</label>
</div>

<div class="mt-4">
    <CardDisplay Cards="@_cachedCards" />
</div>

@if (_searchResult?.HasMoreResults ?? false)
{
    <div class="mt-4 text-center">
        <span class="action-link" @onclick="@LoadMoreAsync"> Show more... </span>
    </div>
}

@code {

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private IEnumerable<Card>? _cachedCards;

    private CardSearchResult? _searchResult;

    [Parameter]
    public string? Query { get; set; }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnParametersSetAsync()
    {
        return SearchAsync();
    }

    private async Task SearchAsync()
    {
        _searchResult = null;

        if (string.IsNullOrWhiteSpace(Query))
        {
            return;
        }

        _searchResult = await _mediator.Send(new SearchCards(Query));
        _cachedCards = _searchResult.Cards;
    }

    private async Task LoadMoreAsync()
    {
        if (string.IsNullOrEmpty(Query) || _searchResult == null) 
        {
            return;
        }
        _searchResult = await _mediator.Send(new SearchCards(Query, _searchResult.Page + 1));

        if (_searchResult.Cards != null)
        {
            _cachedCards = _cachedCards?.Concat(_searchResult.Cards);
        }
    }
}