@page "/collection"
@page "/collection/{SetCode}"
@using System.Threading
@using MediatR
@using Queries
@using MagicCardTracker.Contracts
@inject IMediator _mediator
@inject CollectionSettings _settings
@implements IDisposable

<div class="block">
    <label class="text-2xl font-bold">
        Collection
    </label>
    <label class="block text-sm text-neutral-400">@_filteredCollection.Count() cards</label>
</div>

<div class="mt-4">
    <CardDisplay Cards="@_loadedCards" />
</div>

@if (_hasMore)
{
    <div class="mt-4 text-center">
        <span class="action-link" @onclick="@ShowMore"> Show more... </span>
    </div>
}

@code {

    [Parameter]
    public string? SetCode { get; set; }

    private CancellationTokenSource _cts = new CancellationTokenSource();
    private int _take;
    private bool _hasMore;
    private IEnumerable<CollectedCard> _collection = Enumerable.Empty<CollectedCard>();
    private IEnumerable<CollectedCard> _filteredCollection = Enumerable.Empty<CollectedCard>();
    private IEnumerable<CollectedCard> _loadedCards = Enumerable.Empty<CollectedCard>();
    private bool _showFilter;
    private HashSet<string> _filteredColors = new HashSet<string>();
    private Legality _filteredLegalities = 0;
    private HashSet<CardType> _filteredCardTypes = new HashSet<CardType>();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        
        _collection = await _mediator.Send(new GetCollectedCards(), _cts.Token);
        Filter();
    }

    private void CancelFilter()
    {
        _showFilter = false;
    }

    private void Filter()
    {
        _filteredCollection = !string.IsNullOrWhiteSpace(SetCode)
            ? _collection.Where(c => string.Equals(c.SetCode, SetCode, StringComparison.InvariantCultureIgnoreCase))
            : _collection;

        if (_filteredColors.Any())
        {
            _filteredCollection = _filteredCollection.Where(c => c.Colors.Any(c => _filteredColors.Contains(c)));
        }

         if (_filteredCardTypes.Any())
        {
            _filteredCollection = _filteredCollection.Where(c => _filteredCardTypes.Contains(c.CardType));
        }

        _filteredCollection = _filteredCollection.Where(c => c.Legalities.HasFlag(_filteredLegalities));

        _filteredCollection = _filteredCollection.OrderByDescending(c => c.ReleaseAt)
                                                 .ThenByDescending(c => c.Rarity)
                                                 .ToList(); // Create a copy to prevent enumerables from filtering 

        ShowMore();

        _showFilter = false;
    }

    private void SetLegalityFilter(Legality legality)
    {
        _filteredLegalities = _filteredLegalities.HasFlag(legality)
            ? _filteredLegalities & ~legality
            : _filteredLegalities | legality;
    }

    private void SetCardType(CardType cardType)
    {
        if (_filteredCardTypes.Contains(cardType)) 
        {
            _filteredCardTypes.Remove(cardType);
        }
        else 
        {
            _filteredCardTypes.Add(cardType);
        }
    }

    private void SetColorFilter(string color)
    {
        if (_filteredColors.Contains(color)) 
        {
            _filteredColors.Remove(color);
        }
        else 
        {
            _filteredColors.Add(color);
        }
    }

    private void ShowFilter()
    {
        _showFilter = true;
    }

    private void ShowMore()
    {
        _take += _settings.DisplayBatchSize;
        _hasMore = _take < _filteredCollection.Count();
        _loadedCards = _filteredCollection.Take(_take);
    }
}
