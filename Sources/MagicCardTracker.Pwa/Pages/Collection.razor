@page "/collection"
@page "/collection/{SetCode}"
@using System.Threading
@using MediatR
@using Queries
@using MagicCardTracker.Contracts
@inject IMediator _mediator
@inject CollectionSettings _settings
@implements IDisposable

<div class="row">
    <div class="col-12 lead d-flex justify-content-between">
        <span>Collection</span>
        <div>
            <span class="me-4 action-link" @onclick="@ShowFilter">Filter</span>
            <a href="collection/quick-collect"> Quick Collect</a>
        </div>
    </div>
</div>

<div class="side-panel shadow @(_showFilter ? "show" : null)">
    <div class="d-flex flex-column content bg-elevated h-100">
        <span class="lead">Filter</span>
        <div class="mt-4">
            <label> Set </label>
            <input class="form-control w-100" @bind="SetCode" />
        </div>
        <div class="mt-4">
            <label> Color </label>
            <div class="d-flex justify-content-evenly">
                <span class="text-black"><i class="bi bi-circle-fill"></i></span>
                <span class="text-white ms-2"><i class="bi bi-circle-fill"></i></span>
                <span class="text-green ms-2"><i class="bi bi-circle-fill"></i></span>
                <span class="text-blue ms-2"><i class="bi bi-circle-fill"></i></span>
                <span class="text-red ms-2"><i class="bi bi-circle-fill"></i></span>
            </div>
        </div>
        <div class="mt-4">
            <label> Type </label>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="creature">
                <label class="form-check-label" for="creature">
                    Creature
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="creature">
                <label class="form-check-label" for="creature">
                    Planeswalker
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="enchantment">
                <label class="form-check-label" for="enchantment">
                    Enchantment
                </label>
            </div>
            
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="enchantment">
                <label class="form-check-label" for="enchantment">
                    Instant
                </label>
            </div>
        
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="enchantment">
                <label class="form-check-label" for="enchantment">
                    Sorcery
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="enchantment">
                <label class="form-check-label" for="enchantment">
                    Artifact
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="enchantment">
                <label class="form-check-label" for="enchantment">
                    Land
                </label>
            </div>
        </div>
        <div class=" mt-4">
            <label>Legalities</label>
            <div class="mt-2 d-flex text-center small">
                <span class="p-1 col text-truncate bg-bad">Standard</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Pioneer</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Modern</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Legacy</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Vintage</span>
            </div>
            <div class="mt-1 d-flex text-center small">
                <span class="p-1 col text-truncate bg-bad">Brawl</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Historic</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Pauper</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Penny</span>
                <span class="p-1 ms-1 col text-truncate bg-bad">Commander</span>
            </div>
        </div>
        <button class="btn btn-primary mt-4" @onclick="@Filter"> Filter </button>
        <button class="btn btn-outline-primary mt-2" @onclick="@CloseFilter"> Cancel </button>
    </div>
</div>
<LoadingIndicator IsBusy=@_isLoading></LoadingIndicator>

@if (!_isLoading)
{
    <CardDisplay Cards="@_loadedCards">
        <div class="color-white-60 text-center flex-grow-1 d-flex justify-content-center align-items-center lead">
            Hell, no... Looks like you don't have any cards in your collection
        </div>
    </CardDisplay>

    @if (_hasMore)
    {
        <div class="row">
            <div class="col-12">
                <div class="content text-center">
                    <span class="action-link" @onclick="@ShowMore"> Show more... </span>
                </div>
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public string? SetCode { get; set; }

    private bool[] _dropdownStates = new[] { false, false, false, false };
    private CancellationTokenSource _cts = new CancellationTokenSource();
    private bool _isLoading;
    private int _take;
    private bool _hasMore;
    private IEnumerable<CollectedCard> _collection = Enumerable.Empty<CollectedCard>();
    private IEnumerable<CollectedCard> _loadedCards = Enumerable.Empty<CollectedCard>();
    private bool _showFilter;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        _collection = await _mediator.Send(new GetCollectedCards(), _cts.Token);
        Filter();
        _isLoading = false;
    }

    private void CloseFilter()
    {
        _showFilter = false;
    }

    private void Filter()
    {
        if (!string.IsNullOrWhiteSpace(SetCode))
        {
            _collection = _collection.Where(c => c.SetCode == SetCode);
        }
        _collection = _collection.OrderByDescending(c => c.ReleaseAt)
                                 .ThenByDescending(c => c.Rarity);
        ShowMore();

        _showFilter = false;
    }

    private void ShowFilter()
    {
        _showFilter = true;
    }

    private void ShowMore()
    {
        if (_collection == null)
        {
            return;
        }

        _take += _settings.DisplayBatchSize;
        _hasMore = _take < _collection.Count();
        _loadedCards = _collection.Take(_take);
    }

    private void ToggleDropdown(int id)
    {
        _dropdownStates[id] = !_dropdownStates[id];
    }
}
