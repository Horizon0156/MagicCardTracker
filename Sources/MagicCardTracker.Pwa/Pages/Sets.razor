@page "/sets"

@using System.Threading;
@using MagicCardTracker.Pwa.Components
@using MediatR;
@using Models
@using Queries
@inject IMediator _mediator;
@inject NavigationManager _navigationManager;
@implements IDisposable;

<div class="flex flex-col">
    <label class="text-2xl font-bold">
        Sets
    </label>
    @if(_showAll) 
    {
        <button class="self-start mt-4 text-purple-400 hover:underline" @onclick="@ToggleShowAll"> Show collected </button>
    }
    @if(!_showAll) 
    {
        <button class="self-start mt-4 text-purple-400 hover:underline" @onclick="@ToggleShowAll"> Show all </button>
    }
    
</div>

<div class="mt-4 flex flex-col gap-4">
@foreach (var set in _showAll 
                ? _majorSets
                : _collectedSets)
{
    <div class="flex bg-neutral-700 cursor-pointer p-4 rounded-md" @onclick="@(() => BrowseSet(set))">
        <img class="w-10 invert" src="@set.SetIconUrl" alt="@set.Code.ToUpper()"/>
            <div class="ms-4 flex flex-col grow">
                <span> @set.Name (@set.Code.ToUpper())</span>
                <span class="text-sm text-neutral-400">@set.NumberOfCollectedCards / @set.NumberOfCards collected</span>
                <div class="h-2 mt-1 bg-neutral-800 rounded-md">
                    <div class="bg-purple-400 rounded-md h-2" role="progressbar" style="width: @(set.Completeness)%;"></div>
                </div>
            </div>
    </div>
}
</div>

@code 
{
    private bool _showAll;

    private bool _hasCards;

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private IEnumerable<Set> _majorSets = Enumerable.Empty<Set>();

    private IEnumerable<Set> _collectedSets = Enumerable.Empty<Set>();


    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnInitializedAsync()
    {
        return LoadSetsAsync();
    }

    private async Task LoadSetsAsync()
    {
        var sets = await _mediator.Send(new GetSetsWithCollectionInfo(), _cts.Token) ?? Enumerable.Empty<Set>();
        _majorSets = sets.Where(s => s.IsCoreOrExpansionSet || s.NumberOfCollectedCards > 0);
        _collectedSets = sets.Where(s => s.NumberOfCollectedCards > 0);
        _hasCards = _collectedSets.Any();
        _showAll = !_hasCards;
    }

    private void ToggleShowAll()
    {
        _showAll = !_showAll;
    }

    private void BrowseSet(Set set)
    {
        if (_showAll)
        {
            _navigationManager.NavigateTo($"/search/set:{set.Code}");
        }
        else
        {
            _navigationManager.NavigateTo($"/collection/{set.Code}");
        }
    }
}