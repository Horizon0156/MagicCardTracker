@page "/sets"

@using System.Threading;
@using MagicCardTracker.Pwa.Components
@using MediatR;
@using Models
@using Queries
@inject IMediator _mediator;
@inject NavigationManager _navigationManager;
@implements IDisposable;

<div class="row">
    <div class="col-12 lead d-flex justify-content-between">
        <span>Sets</span>
        
        @if (_hasCards)
        {
            <span class="ms-2 action-link" @onclick="@ToggleShowAll"> @(_showAll ? "Show collected" : "Show all") </span>
        }
    </div>
</div>

<LoadingIndicator IsBusy=@_isLoading></LoadingIndicator>

@if (!_isLoading && _majorSets != null && _collectedSets != null)
{
    @foreach (var set in _showAll 
                ? _majorSets
                : _collectedSets)
    {
        <div class="row mt-2 selectable" @onclick="@(() => BrowseSet(set))">
            <div class="col-12 d-flex bg-elevated content">
                <img class="set-icon" src="@set.SetIconUrl" alt="@set.Code.ToUpper()"/>
                <div class="ms-4 d-flex flex-column flex-grow-1">
                    <span> @set.Name (@set.Code.ToUpper())</span>
                    <span class="color-white-60">@set.NumberOfCollectedCards / @set.NumberOfCards collected</span>
                    <div class="progress mt-1">
                        <div class="progress-bar" role="progressbar" style="width: @(set.Completeness)%;"></div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code 
{
    private bool _isLoading;

    private bool _showAll;

    private bool _hasCards;

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private IEnumerable<Set>? _majorSets;

    private IEnumerable<Set>? _collectedSets;


    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnInitializedAsync()
    {
        return LoadSetsAsync();
    }

    private async Task LoadSetsAsync()
    {
        _isLoading = true;
        var sets = await _mediator.Send(new GetSetsWithCollectionInfo(), _cts.Token);
        _majorSets = sets.Where(s => s.IsCoreOrExpansionSet || s.NumberOfCollectedCards > 0);
        _collectedSets = sets.Where(s => s.NumberOfCollectedCards > 0);
        _hasCards = _collectedSets.Any();
        _showAll = !_hasCards;

        _isLoading = false;
    }

    private void ToggleShowAll()
    {
        _showAll = !_showAll;
    }

    private void BrowseSet(Set set)
    {
        if (_showAll)
        {
            _navigationManager.NavigateTo($"/search/set:{set.Code}");
        }
        else
        {
            _navigationManager.NavigateTo($"/collection/{set.Code}");
        }
    }
}