@page "/profile"
@using Commands
@using MagicCardTracker.Pwa.Components
@using MediatR
@using System.Threading
@using Models
@using Queries
@implements IDisposable
@inject IMediator _mediator

<LoadingIndicator IsBusy="@_isLoading" 
                  FadeOutBackground="true" 
                  Text="@_loadingInformation"/>

<div class="row">
    <div class="col-md-6">
        <div class="content bg-elevated d-flex flex-column">
            <label class="lead">
                Statistics
            </label>
            <label class="color-white-60">
                Five most valuable cards
            </label>
            @if(_collectionStatistic != null)
            {
                <img class="magic-card thumbnail mx-auto" src="@_collectionStatistic.FiveMostValuableCards.FirstOrDefault()?.ImageUrl">

                <table class="mt-2 w-100 color-white-60">
                        <thead>
                            <tr>
                                <th> Name </th>
                                <th> EUR </th>
                                <th> USD </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var card in _collectionStatistic.FiveMostValuableCards)
                            {
                                <tr>
                                    <td> @card.Name </td>
                                    <td> @(card.Prices?.StandardInEuros?.ToString() ?? "-") € </td>
                                    <td> @(card.Prices?.StandardInDollars?.ToString() ?? "-") $ </td>
                                </tr>
                            }
                        </tbody>
                    </table>
            }
        </div>
    </div>
    <div class="col-md-6">
        <div class="content bg-elevated d-flex flex-column">
            <label class="lead">
                Your collection
            </label>
            <label class="color-white-60"> Number of cards in collection: <span class="float-end">@_collectionStatistic?.NumberOfCardsCollected</span></label>
            <label class="color-white-60"> Number of unique cards in collection: <span class="float-end">@_collectionStatistic?.NumberOfUniqueCardsCollected</span></label>
            <label class="color-white-60"> Total collection value in EUR: <span class="float-end">@_collectionStatistic?.CollectionValueInEuros €</span></label>
            <label class="color-white-60"> Total collection value in USD: <span class="float-end">@_collectionStatistic?.CollectionValueInDollars $</span></label>
        </div>
        <div class="mt-2 content bg-elevated d-flex flex-column">
            <div class="lead">
                Data management
            </div>
            <button class="mt-2 btn btn-primary" @onclick="@ExportLibraryAsync">
                Export Library
            </button>

            <label class="mt-2 btn btn-primary">
                <InputFile OnChange="@ImportLibraryAsync" accept=".json" hidden></InputFile>
                Import Library
            </label>
            <button class="mt-2 btn btn-primary" @onclick="@UpdateSetsAsync">
                Update Sets
            </button>
            <button class="mt-2 btn btn-primary" @onclick="@UpdateCollectionAsync">
                Update Collection
            </button>
        </div>
        <div class="mt-2 content bg-elevated d-flex flex-column">
            <div class="lead">
                About
            </div>
            <label class="color-white-60">Version: <span class="float-end">1.0.3</span></label>
        </div>
    </div>
</div>

@code 
{
    private CancellationTokenSource _cts = new CancellationTokenSource();

    private bool _isLoading;

    private string _loadingInformation;

    private CollectionStatistic _collectionStatistic;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnInitializedAsync()
    {
        return LoadCollectionAsync();
    }

    private async Task LoadCollectionAsync()
    {
        _loadingInformation = null;
        _isLoading = true;
        _collectionStatistic = await _mediator.Send(new GetCollectionStatistic(), _cts.Token);
        _isLoading = false;
    }

    private async Task ImportLibraryAsync(InputFileChangeEventArgs e)
    {
        _loadingInformation = "Importing library...";
        _isLoading = true;
        using (var libraryStream = e.File.OpenReadStream())
        {
            await _mediator.Send(new ImportLibrary(libraryStream), _cts.Token);
            await LoadCollectionAsync();
            _isLoading = false;
        }
    }

    private async Task ExportLibraryAsync()
    {
        _loadingInformation = "Exporting library...";
        _isLoading = true;
        await _mediator.Send(new ExportLibrary(), _cts.Token);
        _isLoading = false;
    }

    private async Task UpdateSetsAsync()
    {
        _loadingInformation = "Updating set information...";
        _isLoading = true;
        await _mediator.Send(new UpdateSets(), _cts.Token);
        _isLoading = false;
    }

    private async Task UpdateCollectionAsync()
    {
        _loadingInformation = "Updating collection...";
        _isLoading = true;
        await _mediator.Send(new UpdateCollection(), _cts.Token);
        StateHasChanged();
        _isLoading = false;
    }
}