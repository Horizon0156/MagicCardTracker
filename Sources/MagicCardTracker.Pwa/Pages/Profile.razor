@page "/profile"
@using Blazored.LocalStorage
@using ChartJs.Blazor.PieChart
@using Commands
@using MagicCardTracker.Pwa.Components
@using MagicCardTracker.Pwa.Extensions
@using MagicCardTracker.Contracts
@using MediatR
@using System.Threading
@using Models
@using Queries
@implements IDisposable
@inject IMediator _mediator
@inject ILocalStorageService _localStorage

<LoadingIndicator IsBusy="@_isLoading" 
                  FadeOutBackground="true" 
                  Text="@_loadingInformation"/>
<div class="row">
    @if(_collectionStatistic?.NumberOfCardsCollected > 0)
    {
        <div class="col-md-6">
            <div class="content bg-elevated d-flex flex-column">
                <label class="lead">
                    Most valuable cards 
                    <span class="action-link float-end" @onclick="@ToggleCurrencyAsync"> 
                        @_dominatingCurrency.ToCurrencySymbol() <i class="bi bi-sort-numeric-down-alt"></i>
                    </span>
                </label>
                
                <div class="mt-2 d-flex flex-wrap justify-content-center">
                    <img class="magic-card small" @onclick="@(() => ShowCardAsync(@_collectionStatistic.FiveMostValuableCards.FirstOrDefault()))" src="@_collectionStatistic.FiveMostValuableCards.FirstOrDefault()?.ImageUrl">
                    <ol class="mt-2 color-white-60">
                        @foreach (var card in _collectionStatistic.FiveMostValuableCards)
                        {
                        <li class="selectable" @onclick="@(() => ShowCardAsync(card))">
                            <div class="d-flex flex-column">                        
                                <span class="@(card.FoilCount > 0 ? "rainbow-text" : null)" > @card.Name</span>
                                <small>
                                    @card.Prices.ToString(card.FoilCount > 0)
                                </small>
                            </div>
                        </li>
                        }
                    </ol>
                </div>
                
            </div>
            <div class="mt-2 content bg-elevated d-flex flex-column">
                <label class="lead">
                    Mana Distribution
                </label>
                <div class="mt-2">
                    @if(_chartConfig != null)
                    {
                        <Chart Config="_chartConfig"/>
                    }
                </div>   
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6 d-flex align-items-center justify-content-center text-center lead">
            Start collecting some cards to get more insights
        </div>
    }
    <div class="col-md-6 mt-2 mt-md-0">
        <div class="content bg-elevated d-flex flex-column">
            <label class="lead">
                Your collection
            </label>
            <label class="color-white-60"> Number of cards in collection: <span class="float-end">@_collectionStatistic?.NumberOfCardsCollected</span></label>
            <label class="ms-4 color-white-60"> Common: <span class="float-end">@_collectionStatistic?.NumberOfCommonCards</span></label>
            <label class="ms-4 color-white-60"> Uncommon: <span class="float-end">@_collectionStatistic?.NumberOfUncommonCards</span></label>
            <label class="ms-4 color-white-60"> Rare: <span class="float-end">@_collectionStatistic?.NumberOfRareCards</span></label>
            <label class="ms-4 color-white-60"> Mythic: <span class="float-end">@_collectionStatistic?.NumberOfMythicCards</span></label>
            <label class="color-white-60"> Number of unique cards in collection: <span class="float-end">@_collectionStatistic?.NumberOfUniqueCardsCollected</span></label>
            <label class="color-white-60"> Total collection value: <span class="float-end">â‚¬@_collectionStatistic?.CollectionValueInEuros.ToString("F2")</span></label>
            <label class="color-white-60"><span class="float-end">$@_collectionStatistic?.CollectionValueInDollars.ToString("F2")</span></label>
        </div>
        <div class="mt-2 content bg-elevated d-flex flex-column">
            <div class="lead">
                Data management
            </div>
            <label class="mt-2 color-white-60"> Library </label>
            <div class="btn-group mt-2">
            <button class="btn btn-primary" @onclick="@ExportLibraryAsync">
                Export
            </button>

            <label class="ms-1 btn btn-primary">
                <InputFile OnChange="@ImportLibraryAsync" accept=".json" hidden></InputFile>
                Import
            </label>
            </div>
            <label class="small mt-2 color-white-60">
                Please make sure to backup your library as you might clear your Browser storage 
                accidentally. It's also recommended to backup your library before you 
                update your library's metadata.
            </label>
            <label class="mt-2 color-white-60"> Update</label>
            <div class="btn-group mt-2">
                <button class="btn btn-primary" @onclick="@UpdateSetsAsync">
                    Sets
                </button>
                <button class="btn ms-1 btn-primary" @onclick="@UpdateCollectionAsync">
                    Metadata
                </button>
                <button class="btn ms-1 btn-primary" @onclick="@UpdatePricesAsync">
                    Prices
                </button>
            </div>
            <label class="small mt-2 color-white-60">
                Update Sets to load new MTG Editions. Only update Metadata in case you are
                missing card data. This will reload your entire collection. To keep market prices 
                up to date, just refresh Prices (updates once per day).
            </label>
        </div>
        <div class="mt-2 content bg-elevated d-flex flex-column">
            <div class="lead">
                About
            </div>
            <label class="color-white-60">Version: <span class="float-end"> @_version </span></label>
        </div>
    </div>
</div>

<CardOverlay @ref="_cardOverlay"/>

@code 
{
    private CancellationTokenSource _cts = new CancellationTokenSource();

    private bool _isLoading;

    private string _loadingInformation;

    private Currency _dominatingCurrency;

    private CollectionStatistic _collectionStatistic;

    private CardOverlay _cardOverlay;

    private PieConfig _chartConfig = new PieConfig(true);

    private string _version => GetType().Assembly.GetName().Version.ToString(3);

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        _dominatingCurrency = await _localStorage.GetItemAsync<Currency>("currency", _cts.Token);
        await LoadCollectionAsync();
    }

    private async Task LoadCollectionAsync()
    {
        _loadingInformation = null;
        _isLoading = true;
        _collectionStatistic = await _mediator.Send(
            new GetCollectionStatistic(_dominatingCurrency),
            _cts.Token);
        _chartConfig.AddManaDistribution(_collectionStatistic);
        _isLoading = false;
    }

    private async Task ToggleCurrencyAsync()
    {
        _dominatingCurrency = _dominatingCurrency == Currency.Dollar
            ? Currency.Euro
            : Currency.Dollar;

        await _localStorage.SetItemAsync("currency", _dominatingCurrency, _cts.Token);
        await LoadCollectionAsync();
    }

    private async Task ImportLibraryAsync(InputFileChangeEventArgs e)
    {
        _loadingInformation = "Importing library...";
        _isLoading = true;
        using (var libraryStream = e.File.OpenReadStream())
        {
            await _mediator.Send(new ImportLibrary(libraryStream), _cts.Token);
            await LoadCollectionAsync();
            _isLoading = false;
        }
    }

    private async Task ExportLibraryAsync()
    {
        _loadingInformation = "Exporting library...";
        _isLoading = true;
        await _mediator.Send(new ExportLibrary(), _cts.Token);
        _isLoading = false;
    }

    private async Task UpdateSetsAsync()
    {
        _loadingInformation = "Updating set information...";
        _isLoading = true;
        await _mediator.Send(new UpdateSets(), _cts.Token);
        _isLoading = false;
    }

    private async Task UpdateCollectionAsync()
    {
        _loadingInformation = "Updating metadata. This might take some time...";
        _isLoading = true;
        await _mediator.Send(new UpdateCollection(
            mode: UpdateMode.AllMutableProperties),
            _cts.Token);
        await LoadCollectionAsync();
        _isLoading = false;
    }

    private async Task UpdatePricesAsync()
    {
        _loadingInformation = "Updating prices...";
        _isLoading = true;
        await _mediator.Send(new UpdateCollection(mode: UpdateMode.Prices), _cts.Token);
        await LoadCollectionAsync();
        _isLoading = false;
    }

    private Task ShowCardAsync(Card card)
    {
        return card != null
            ? _cardOverlay.OpenAsync(card)
            : Task.CompletedTask;
    }
}