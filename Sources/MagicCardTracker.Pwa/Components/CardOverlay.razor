@using Commands
@using Contracts
@using MediatR;
@using System.Threading
@using Queries

@inject IMediator Mediator;

@if (_isVisible)
{
<div class="backdrop overflow-auto">
    <div class="container d-flex flex-grow-1">
        <div class="row flex-grow-1 align-items-center">
            <div class="col-md-6 d-flex justify-content-center">
                <div class="content">
                    <img class="magic-card" @onclick="@Close" src="@_cardImageUrl" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="bg-elevated content">
                <LoadingIndicator IsBusy="@_isBusy"></LoadingIndicator>
                @if (_card != null)
                {
                <div class="lead">
                    @_card.Name
                </div>
                <div class="mt-2 color-white-60 row">
                    <div class="col-6 d-flex flex-column">
                        <label>Market Price:</label>
                        <label>
                            @_card.Prices?.ToString(false)
                        </label>
                    </div>
                     <div class="col-6 d-flex flex-column">
                        <label class="rainbow-text">Foil:</label>
                        <label>
                            @_card.Prices?.ToString(true)
                        </label>
                    </div>
                </div>
                
                <label class="mt-4">Collected</label>
                <div class="mt-2 color-white-60 row">
                    <div class="col-6 d-flex flex-column">
                        <input id="standardCount" class="form-control" type="number" min=0 @bind="@_card.Count"></input>
                        <label for="standardCount" class="ms-1 color-white-60">Standard</label>
                    </div>
                    <div class="col-6 d-flex flex-column">
                        <input id="foilCount" class="form-control" type="number" min=0 @bind="@_card.FoilCount"></input>
                        <label for="foilCount" class="ms-1 rainbow-text">Foil</label>
                    </div>
                </div>

                <label class="mt-4">Legalities</label>
                <div class="mt-2 d-flex text-center small">
                    <span class="p-1 col text-truncate @GetLegalClass(_card, Legality.Standard)">Standard</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Pioneer)">Pioneer</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Modern)">Modern</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Legacy)">Legacy</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Vintage)">Vintage</span>
                </div>
                <div class="mt-1 d-flex text-center small">
                    <span class="p-1 col text-truncate @GetLegalClass(_card, Legality.Brawl)">Brawl</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Historic)">Historic</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Pauper)">Pauper</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Penny)">Penny</span>
                    <span class="p-1 ms-1 col text-truncate @GetLegalClass(_card, Legality.Commander)">Commander</span>
                </div>

                <div class="mt-4 d-flex justify-content-end">
                    <button class="btn btn-primary me-2" @onclick="@UpdateCollection"> Save </button>
                    <button class="btn btn-outline-primary" @onclick="@Close">Close </button>
                </div>
                }
                </div>
            </div>
        </div>
    </div>
</div>

}

@code
{
    private string _cardImageUrl { get; set; }

    private CollectedCard _card { get; set; }

    private bool _isVisible;

    private bool _isBusy;

    public async Task OpenAsync(Card card)
    {
        _cardImageUrl = card.ImageUrl;
        _isVisible = true;
        _isBusy = true;
        StateHasChanged();

        _card = card is CollectedCard
            ? (CollectedCard)card
            : await Mediator.Send(new GetCollectableCard(card));
        _isBusy = false;
        StateHasChanged();
    }

    public void Close()
    {
        _isVisible = false;
        _card = null;
        StateHasChanged();
    }

    private async Task UpdateCollection()
    {
        var command = new AddCard(_card);
        await Mediator.Send(command, CancellationToken.None);
        Close();
    }

    private static string GetLegalClass(Card card, Legality legality)
    {
        return card.Legalities.HasFlag(legality)
            ? "bg-good"
            : "bg-bad";
    }
}