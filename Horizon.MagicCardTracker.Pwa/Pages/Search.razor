@page "/search/{Query}"
@using Horizon.MagicCardTracker.ScryfallClient
@using Horizon.MagicCardTracker.SrcyfallClient.Extensions
@using Card = Horizon.MagicCardTracker.Contracts.Card
@using CardList = Horizon.MagicCardTracker.Contracts.CardList
@using System.Threading
@inject IScryfallClient _scryfallClient
@implements IDisposable

<div class="row">
    <div class="col-12 lead d-flex justify-content-between">
        <span>Search results</span>
    </div>
</div>

@if(_searchResult != null)
{
    <div class="row">
        @foreach (var card in _searchResult.Cards)
        {
            <div class="col-3 mt-2">
                <img 
                    class="img-fluid" 
                    style="border-radius: 5%;" 
                    src="@(card.ImageUrl)"
                    @onclick="@(async () => await OpenDetailsAsync(card))"/>
            </div>
        }
    </div>
}

<CardOverlay @ref="_cardOverlay"></CardOverlay>
<LoadingIndicator IsBusy=@_isLoading></LoadingIndicator>

@code {

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private bool _isLoading;

    private CardList _searchResult;

    private CardOverlay _cardOverlay;

    [Parameter]
    public string Query { get; set; }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnParametersSetAsync()
    {
        return SearchAsync();
    }

    private Task OpenDetailsAsync(Card card)
    {
        return _cardOverlay.OpenAsync(card);
    }

    private async Task SearchAsync()
    {
        _searchResult = null;

        if (string.IsNullOrEmpty(Query))
        {
            return;
        }

        _isLoading = true;

        var query = Query.Replace(" ", "+");

        _searchResult = (await _scryfallClient.SearchCardsAsync(query, true, _cts.Token)).ToContract();
        _isLoading = false;
    }
}
